(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{283:function(e,a,r){"use strict";r.r(a);var s=r(38),n=Object(s.a)({},function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"打包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打包","aria-hidden":"true"}},[e._v("#")]),e._v(" 打包")]),e._v(" "),r("p",[e._v("打包整个应用应该遵循"),r("code",[e._v("NPM")]),e._v("风格：")]),e._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" pack\n")])])]),r("p",[r("a",{attrs:{href:"https://docs.npmjs.com/cli/pack",target:"_blank",rel:"noopener noreferrer"}},[e._v("npm pack"),r("OutboundLink")],1),e._v(" 会在应用当中生成一个"),r("code",[e._v("TGZ")]),e._v("文件，您可以把这个应用移动到其他的目录下。然而应用也可以发布到NPM注册中心。")]),e._v(" "),r("p",[e._v("请注意(这很重要)：为了能与"),r("code",[e._v("published/packed")]),e._v("正常的运行，我们需要在目标环境拥有打包"),r("a",{attrs:{href:"https://www.npmjs.com/package/es4x-pm",target:"_blank",rel:"noopener noreferrer"}},[e._v("es4x-pm"),r("OutboundLink")],1),e._v("的权限，因为我们有必要安装"),r("code",[e._v("java")]),e._v("的部分。")]),e._v(" "),r("h2",{attrs:{id:"docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker","aria-hidden":"true"}},[e._v("#")]),e._v(" Docker")]),e._v(" "),r("p",[e._v("您也可以为自己创建Docker镜像：")]),e._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[e._v("es4x dockerfile\n")])])]),r("p",[e._v("这样可以生成一个简化的"),r("code",[e._v("dockerfile")]),e._v("，您可以根据自己的需要自定义这个"),r("code",[e._v("dockerfile")]),e._v("，默认状况下这个文件分3步构建：")]),e._v(" "),r("ol",[r("li",[e._v("第一步，"),r("code",[e._v("node")]),e._v("用来安装所有的"),r("code",[e._v("NPM")]),e._v("依赖")]),e._v(" "),r("li",[e._v("第二步，"),r("code",[e._v("java")]),e._v("用来安装"),r("code",[e._v("Maven")]),e._v("依赖")]),e._v(" "),r("li",[e._v("最后一步，GraalVM镜像用来启动应用")])]),e._v(" "),r("p",[e._v("默认情况下，我们使用"),r("a",{attrs:{href:"https://hub.docker.com/r/oracle/graalvm-ce",target:"_blank",rel:"noopener noreferrer"}},[e._v("oracle/graalvm-ce"),r("OutboundLink")],1),e._v("docker镜像，但是您也可以用其他含有openJdk并支持JVMCI的镜像(请使用java11及以上的版本)。")]),e._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[e._v("docker build "),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" --build-arg "),r("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("BASEIMAGE")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("openjdk:11\n")])])]),r("h2",{attrs:{id:"jlink"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jlink","aria-hidden":"true"}},[e._v("#")]),e._v(" JLink")]),e._v(" "),r("p",[e._v("Java 11 支持 "),r("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/tools/jlink.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("jlink"),r("OutboundLink")],1),e._v("。您可以使用jlink工具来把所有模块及其依赖整理优化到自定义的运行镜像。")]),e._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[e._v("es4x jlink\n")])])]),r("p",[e._v("这会生成一个最优的运行环境，这意味着可以不用依赖于完整的JDK环境。")]),e._v(" "),r("p",[e._v("作为对比，一个hello world应用在运行时占用"),r("strong",[e._v("80Mb")]),e._v("的空间，但是完整的JDK环境却要求"),r("strong",[e._v("200Mb")]),e._v("。")]),e._v(" "),r("p",[e._v("这个特性可以和"),r("code",[e._v("Dockerfile")]),e._v("配合使用。用"),r("code",[e._v("OpenJDK")]),e._v("为环境的镜像以取代graal为环境的镜像。然后第二步，运行jlink：")]),e._v(" "),r("div",{staticClass:"language-dockerfile extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("# 第二步（构建JVM相关代码）\nFROM openjdk:11 AS JVM\nARG ES4X_VERSION=${project.version}\n# force es4x maven resolution only to consider production dependencies\n# 强制es4x的maven解析仅仅关心生产环境的依赖\nENV ES4X_ENV=production\n# 复制上一步的构建步骤\nCOPY --from=NPM /usr/src/app /usr/src/app\n# 指定工作空间\nWORKDIR /usr/src/app\n# 下载ES4X运行环境工具\nRUN curl -sL https://github.com/reactiverse/es4x/releases/download/${ES4X_VERSION}/es4x-pm-${ES4X_VERSION}-bin.tar.gz | \\\n    tar zx --strip-components=1 -C /usr/local\n# 安装java依赖\nRUN es4x install -f\n# 创建最简化的运行环境\nRUN es4x jlink -t /usr/local\n")])])]),r("p",[e._v("这会在jre中生成一个最简的运行环境，这个运行环境在最后一步当中当作最简的基础镜像来使用。")]),e._v(" "),r("div",{staticClass:"language-dockerfile extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('FROM debian:slim\n# 整理前一步骤生成的jar包\nCOPY --from=JVM /usr/local /usr/local\nCOPY --from=JVM /usr/src/app /usr/src/app\n# 指定工作空间\nWORKDIR /usr/src/app\n# 打包应用源\nCOPY . .\n# 为docker容器自定义java options参数\nENV JAVA_OPTS="-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:+UseContainerSupport"\n# 定义入口文件\nENTRYPOINT [ "./node_modules/.bin/es4x-launcher" ]\n')])])]),r("p",[e._v("这一步会生成一个小规模的最终镜像(比上一步生成的镜像稍大)，因为您也同时将最简运行环境打包进入了最终的docker镜像。")])])},[],!1,null,null,null);a.default=n.exports}}]);