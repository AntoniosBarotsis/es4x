(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{298:function(t,e,a){"use strict";a.r(e);var s=a(28),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("This client allows you to interact with any JDBC compliant database\nusing an asynchronous API from your Vert.x application.")]),t._v(" "),a("p",[t._v("The client API is represented with the interface "),a("code",[t._v("JDBCClient")]),t._v(".")]),t._v(" "),a("p",[t._v("To use this project, add the following dependency to the "),a("em",[t._v("dependencies")]),t._v("\nsection of your build descriptor:")]),t._v(" "),a("ul",[a("li",[t._v("Maven (in your "),a("code",[t._v("pom.xml")]),t._v("):")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("io.vertx"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("vertx-jdbc-client"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("${maven.version}"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ul",[a("li",[t._v("Gradle (in your "),a("code",[t._v("build.gradle")]),t._v(" file):")])]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("compile "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'io.vertx:vertx-jdbc-client:${maven.version}'")]),t._v("\n")])])]),a("h1",{attrs:{id:"creating-a-the-client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-the-client"}},[t._v("#")]),t._v(" Creating a the client")]),t._v(" "),a("p",[t._v("There are several ways to create a client. Let’s go through them all.")]),t._v(" "),a("h2",{attrs:{id:"using-default-shared-data-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-default-shared-data-source"}},[t._v("#")]),t._v(" Using default shared data source")]),t._v(" "),a("p",[t._v("In most cases you will want to share a data source between different\nclient instances.")]),t._v(" "),a("p",[t._v("E.g. you scale your application by deploying multiple instances of your\nverticle and you want each verticle instance to share the same\ndatasource so you don’t end up with multiple pools")]),t._v(" "),a("p",[t._v("You do this as follows:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JDBCClient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" from "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/jdbc-client"')]),t._v("\n\nlet client "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JDBCClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("The first call to "),a("code",[t._v("JDBCClient.createShared")]),t._v(" will actually create the\ndata source, and the specified config will be used.")]),t._v(" "),a("p",[t._v("Subsequent calls will return a new client instance that uses the same\ndata source, so the configuration won’t be used.")]),t._v(" "),a("h2",{attrs:{id:"specifying-a-data-source-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specifying-a-data-source-name"}},[t._v("#")]),t._v(" Specifying a data source name")]),t._v(" "),a("p",[t._v("You can create a client specifying a data source name as follows")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JDBCClient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" from "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/jdbc-client"')]),t._v("\n\n\nlet client "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JDBCClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyDataSource"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("If different clients are created using the same Vert.x instance and\nspecifying the same data source name, they will share the same data\nsource.")]),t._v(" "),a("p",[t._v("The first call to "),a("code",[t._v("JDBCClient.createShared")]),t._v(" will actually create the\ndata source, and the specified config will be used.")]),t._v(" "),a("p",[t._v("Subsequent calls will return a new client instance that uses the same\ndata source, so the configuration won’t be used.")]),t._v(" "),a("p",[t._v("Use this way of creating if you wish different groups of clients to have\ndifferent data sources, e.g. they’re interacting with different\ndatabases.")]),t._v(" "),a("h2",{attrs:{id:"creating-a-client-with-a-non-shared-data-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-client-with-a-non-shared-data-source"}},[t._v("#")]),t._v(" Creating a client with a non shared data source")]),t._v(" "),a("p",[t._v("In most cases you will want to share a data source between different\nclient instances. However, it’s possible you want to create a client\ninstance that doesn’t share its data source with any other client.")]),t._v(" "),a("p",[t._v("In that case you can use "),a("code",[t._v("JDBCClient.create")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JDBCClient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" from "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/jdbc-client"')]),t._v("\n\nlet client "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JDBCClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("This is equivalent to calling "),a("code",[t._v("JDBCClient.createShared")]),t._v(" with a unique\ndata source name each time.")]),t._v(" "),a("h2",{attrs:{id:"specifying-a-data-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specifying-a-data-source"}},[t._v("#")]),t._v(" Specifying a data source")]),t._v(" "),a("p",[t._v("If you already have a pre-existing data source, you can also create the\nclient directly specifying that:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JDBCClient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" from "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/jdbc-client"')]),t._v("\n\nlet client "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JDBCClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dataSource"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h1",{attrs:{id:"closing-the-client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#closing-the-client"}},[t._v("#")]),t._v(" Closing the client")]),t._v(" "),a("p",[t._v("It’s fine to keep hold of the client for a long time (e.g. the lifetime\nof your verticle), but once you’re done with it you should close it.")]),t._v(" "),a("p",[t._v("Clients that share a data source with other client instances are\nreference counted. Once the last one that references the same data\nsource is closed, the data source will be closed.")]),t._v(" "),a("h2",{attrs:{id:"automatic-clean-up-in-verticles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#automatic-clean-up-in-verticles"}},[t._v("#")]),t._v(" Automatic clean-up in verticles")]),t._v(" "),a("p",[t._v("If you’re creating clients from inside verticles, the clients will be\nautomatically closed when the verticle is undeployed.")]),t._v(" "),a("h1",{attrs:{id:"getting-a-connection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-a-connection"}},[t._v("#")]),t._v(" Getting a connection")]),t._v(" "),a("p",[t._v("Once you’ve created a client you use "),a("code",[t._v("getConnection")]),t._v(" to get a\nconnection.")]),t._v(" "),a("p",[t._v("This will return the connection in the handler when one is ready from\nthe pool.")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Now do stuff with it:")]),t._v("\n\nclient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("succeeded")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    let connection "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("result")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    connection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SELECT * FROM some_table"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("succeeded")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        let rs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" res2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("result")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do something with results")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Failed to get connection - deal with it")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("The connection is an instance of "),a("code",[t._v("SQLConnection")]),t._v(" which is a common\ninterface not only used by the Vert.x JDBC Client.")]),t._v(" "),a("p",[t._v("You can learn how to use it in the "),a("a",{attrs:{href:"http://vertx.io/docs/vertx-sql-common/js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("common sql\ninterface"),a("OutboundLink")],1),t._v(" documentation.")]),t._v(" "),a("h1",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),a("p",[t._v("Configuration is passed to the client when creating or deploying it.")]),t._v(" "),a("p",[t._v("The following configuration properties generally apply:")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("provider_class")]),a("br"),t._v("\nThe class name of the class actually used to manage the database\nconnections. By default this is\n"),a("code",[t._v("io.vertx.ext.jdbc.spi.impl.C3P0DataSourceProvider")]),t._v(" but if you want\nto use a different provider you can override this property and\nprovide your implementation.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("row_stream_fetch_size")]),a("br"),t._v("\nThe size of "),a("code",[t._v("SQLRowStream")]),t._v(" internal cache which used to better\nperformance. By default it equals to "),a("code",[t._v("128")])])])]),t._v(" "),a("p",[t._v("Assuming the C3P0 implementation is being used (the default), the\nfollowing extra configuration properties apply:")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("url")]),a("br"),t._v("\nthe JDBC connection URL for the database")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("driver_class")]),a("br"),t._v("\nthe class of the JDBC driver")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("user")]),a("br"),t._v("\nthe username for the database")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("password")]),a("br"),t._v("\nthe password for the database")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("max_pool_size")]),a("br"),t._v("\nthe maximum number of connections to pool - default is "),a("code",[t._v("15")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("initial_pool_size")]),a("br"),t._v("\nthe number of connections to initialise the pool with - default is\n"),a("code",[t._v("3")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("min_pool_size")]),a("br"),t._v("\nthe minimum number of connections to pool")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("max_statements")]),a("br"),t._v("\nthe maximum number of prepared statements to cache - default is "),a("code",[t._v("0")]),t._v(".")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("max_statements_per_connection")]),a("br"),t._v("\nthe maximum number of prepared statements to cache per connection -\ndefault is "),a("code",[t._v("0")]),t._v(".")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("max_idle_time")]),a("br"),t._v("\nnumber of seconds after which an idle connection will be closed -\ndefault is "),a("code",[t._v("0")]),t._v(" (never expire).")])])]),t._v(" "),a("p",[t._v("Other Connection Pool providers are:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("BoneCP ("),a("strong",[t._v("DEPRECATED")]),t._v(" you should avoid this pool as it has been\ndeprecated upstream)")])]),t._v(" "),a("li",[a("p",[t._v("Hikari")])])]),t._v(" "),a("p",[t._v("Similar to C3P0 they can be configured by passing the configuration\nvalues on the JSON config object. For the special case where you do not\nwant to deploy your app as a fat jar but run with a vert.x distribution,\nthen it is recommented to use BoneCP if you have no write permissions to\nadd the JDBC driver to the vert.x lib directory and are passing it using\nthe "),a("code",[t._v("-cp")]),t._v(" command line flag.")]),t._v(" "),a("p",[t._v("If you want to configure any other C3P0 properties, you can add a file\n"),a("code",[t._v("c3p0.properties")]),t._v(" to the classpath.")]),t._v(" "),a("p",[t._v("Here’s an example of configuring a service:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JDBCClient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" from "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/jdbc-client"')]),t._v("\n\nlet config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"url"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jdbc:hsqldb:mem:test?shutdown=true"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"driver_class"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"org.hsqldb.jdbcDriver"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"max_pool_size"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nlet client "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JDBCClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Hikari uses a different set of properties:")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("jdbcUrl")]),t._v(" for the JDBC URL")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("driverClassName")]),t._v(" for the JDBC driven class name")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("maximumPoolSize")]),t._v(" for the pool size")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("username")]),t._v(" for the login ("),a("code",[t._v("password")]),t._v(" for the password)")])])]),t._v(" "),a("p",[t._v("Refer to the "),a("a",{attrs:{href:"https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hikari\ndocumentation"),a("OutboundLink")],1),t._v("\nfor further details. Also refer to the "),a("a",{attrs:{href:"http://www.jolbox.com/configuration.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("BoneCP\ndocumentation"),a("OutboundLink")],1),t._v(" to configure\nBoneCP.")]),t._v(" "),a("h1",{attrs:{id:"jdbc-drivers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdbc-drivers"}},[t._v("#")]),t._v(" JDBC Drivers")]),t._v(" "),a("p",[t._v("If you are using the default "),a("code",[t._v("DataSourceProvider")]),t._v(" (relying on c3p0), you\nwould need to copy the JDBC driver class in your "),a("em",[t._v("classpath")]),t._v(".")]),t._v(" "),a("p",[t._v("If your application is packaged as a "),a("em",[t._v("fat jar")]),t._v(", be sure to embed the\njdbc driver. If your application is launched with the "),a("code",[t._v("vertx")]),t._v(" command\nline, copy the JDBC driver to "),a("code",[t._v("${VERTX_HOME}/lib")]),t._v(".")]),t._v(" "),a("p",[t._v("The behavior may be different when using a different connection pool.")]),t._v(" "),a("h1",{attrs:{id:"data-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-types"}},[t._v("#")]),t._v(" Data types")]),t._v(" "),a("p",[t._v("Due to the fact that Vert.x uses JSON as its standard message format\nthere will be many limitations to the data types accepted by the client.\nYou will get out of the box the standard:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("null")])]),t._v(" "),a("li",[a("p",[t._v("boolean")])]),t._v(" "),a("li",[a("p",[t._v("number")])]),t._v(" "),a("li",[a("p",[t._v("string")])])]),t._v(" "),a("p",[t._v("There is also an optimistic cast for temporal types (TIME, DATE,\nTIMESTAMP) and optionally disabled for UUID. UUIDs are supported by many\ndatabases but not all. For example MySQL does not support it so the\nrecommended way is to use a VARCHAR(36) column. For other engines UUID\noptimistic casting can be enabled using the client config json as:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('{ "castUUID": true }\n')])])]),a("p",[t._v("When this config is present UUIDs will be handled as a native type.")]),t._v(" "),a("h1",{attrs:{id:"use-as-osgi-bundle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-as-osgi-bundle"}},[t._v("#")]),t._v(" Use as OSGi bundle")]),t._v(" "),a("p",[t._v("Vert.x JDBC client can be used as an OSGi bundle. However notice that\nyou would need to deploy all dependencies first. Some connection pool\nrequires the JDBC driver to be loaded from the classpath, and so cannot\nbe packaged / deployed as bundle.")])])}),[],!1,null,null,null);e.default=n.exports}}]);