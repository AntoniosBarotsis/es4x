const asyncError = Java.type('io.reactiverse.es4x.impl.AsyncError').asyncError;
const AsyncResult = Java.type('io.vertx.core.AsyncResult');
const Throwable = Java.type('java.lang.Throwable');

module.exports = function (err) {

  let currentStack = new Error().stack;

  if (currentStack && currentStack.length > 2) {
    let asyncStackLine = currentStack.split("\n")[2];

    // This is the fix for:
    // Unhandled exception caused by org.graalvm.polyglot.PolyglotException: java.lang.AssertionError: Invalid libray usage. Cached library must be adopted by a RootNode before it is executed.
    //
    // apparently a js error (e.g.: new Error('kaboom!')) will assert true in the statement:
    // if (err instanceof AsyncResult) // so this is quite odd
    // and given that the casted value passed to the java function will fail
    // by strictly asking to check if the object is a java object and then perform the instanceof will work)
    if (Java.isJavaObject(err)) {
      if (err instanceof AsyncResult || err instanceof Throwable) {
        return asyncError(err, asyncStackLine);
      }
    }

    // if the err is not a Error object make it one
    if (!(err instanceof Error)) {
      err = new Error(err);
    }

    //split stack by line
    let stackParts = err.stack.split("\n");
    stackParts.splice(1,0,asyncStackLine);
    //join the stacktrace
    err.stack = stackParts.join("\n");

    return err;
  }

  // nothing could be inferred (return as is)
  return err;
};

