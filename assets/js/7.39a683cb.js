(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{206:function(t,s,e){t.exports=e.p+"assets/img/producer-reply-handler.8b514372.png"},207:function(t,s,e){t.exports=e.p+"assets/img/consumer-reply.80a17ad5.png"},237:function(t,s,e){"use strict";e.r(s);var a=e(28),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("This component provides AMQP 1.0 producer and consumer support via a\nbridging layer implementing the Vert.x event bus MessageProducer and\nMessageConsumer APIs over the top of\n"),a("a",{attrs:{href:"https://github.com/vert-x3/vertx-proton/",target:"_blank",rel:"noopener noreferrer"}},[t._v("vertx-proton"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("Warning")])]),t._v(" "),a("p",[t._v("This component will be removed in Vert.x 4, instead you should use\n"),a("a",{attrs:{href:"https://vertx.io/docs/vertx-amqp-client/java/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vert.x AMQP Client"),a("OutboundLink")],1)])]),t._v(" "),a("h1",{attrs:{id:"using-vert-x-amqp-bridge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-vert-x-amqp-bridge"}},[t._v("#")]),t._v(" Using Vert.x AMQP Bridge")]),t._v(" "),a("p",[t._v("To use Vert.x AMQP Bridge, add the following dependency to the\n"),a("em",[t._v("dependencies")]),t._v(" section of your build descriptor:")]),t._v(" "),a("ul",[a("li",[t._v("Maven (in your "),a("code",[t._v("pom.xml")]),t._v("):")])]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("io.vertx"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("vertx-amqp-bridge"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("${maven.version}"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ul",[a("li",[t._v("Gradle (in your "),a("code",[t._v("build.gradle")]),t._v(" file):")])]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("compile io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vertx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("vertx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("amqp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bridge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("maven"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h1",{attrs:{id:"getting-started"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-started"}},[t._v("#")]),t._v(" Getting Started")]),t._v(" "),a("h2",{attrs:{id:"sending-a-message"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sending-a-message"}},[t._v("#")]),t._v(" Sending a Message")]),t._v(" "),a("p",[t._v("Here is a simple example of creating a "),a("code",[t._v("MessageProducer")]),t._v(" and sending a\nmessage with it. First, an "),a("code",[t._v("AmqpBridge")]),t._v(" is created and started to\nestablish the underlying AMQP connection, then when this is complete the\nproducer is created and a message sent using it. You can optionally\nsupply a username and password when starting the bridge, as well as\nsupplying "),a("code",[t._v("AmqpBridgeOptions")]),t._v(" in order to configure various options such\nas for using SSL connections.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" AmqpBridge "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/amqp-bridge"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bridge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AmqpBridge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Start the bridge, then use the event loop thread to process things thereafter.")]),t._v("\nbridge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5672")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set up a producer using the bridge, send a message with it.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" producer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bridge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createProducer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myAmqpAddress"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" amqpMsgPayload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  amqpMsgPayload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myStringContent"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  producer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("amqpMsgPayload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"receiving-a-message"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#receiving-a-message"}},[t._v("#")]),t._v(" Receiving a Message")]),t._v(" "),a("p",[t._v("Here is a simple example of creating a "),a("code",[t._v("MessageConsumer")]),t._v(" and registering\na handler with it. First, an "),a("code",[t._v("AmqpBridge")]),t._v(" is created and started to\nestablish the underlying AMQP connection, then when this is complete the\nconsumer is created and a handler registered that prints the body of\nincoming AMQP messages.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" AmqpBridge "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/amqp-bridge"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bridge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AmqpBridge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Start the bridge, then use the event loop thread to process things thereafter.")]),t._v("\nbridge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5672")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set up a consumer using the bridge, register a handler for it.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" consumer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bridge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createConsumer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myAmqpAddress"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  consumer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("vertxMsg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" amqpMsgPayload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vertxMsg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" amqpBody "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" amqpMsgPayload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Received a message with body: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" amqpBody"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Receipt of the AMQP message is accepted automatically as soon as the\nconsumer’s handler returns upon delivering the message to the\napplication.")]),t._v(" "),a("h1",{attrs:{id:"message-payload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#message-payload"}},[t._v("#")]),t._v(" Message Payload")]),t._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),a("p",[t._v("The message payload is passed as a JsonObject with elements representing\nvarious sections of the "),a("a",{attrs:{href:"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format",target:"_blank",rel:"noopener noreferrer"}},[t._v("AMQP\nmessage"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("The top-level elements supported are:")]),t._v(" "),a("p",[a("strong",[t._v("body")]),t._v(": The content for the body section of the AMQP message.\n"),a("strong",[t._v("body_type")]),t._v(': An optional String used to indicate whether the "body"\nelement represents an AmqpValue (default), Data, or AmqpSequence\nsection. The values used are "value", "data", and "sequence"\nrespectively. '),a("strong",[t._v("header")]),t._v(": An optional JsonObject representing the\nelements of the message Header section. Expanded below. "),a("strong",[t._v("properties")]),t._v(":\nAn optional JsonObject representing the elements of the message\nProperties section. Expanded below. "),a("strong",[t._v("application_properties")]),t._v(": An\noptional JsonObject containing any application defined\nproperties(/headers). "),a("strong",[t._v("message_annotations")]),t._v(": An optional JsonObject\nrepresenting any message annotations.")]),t._v(" "),a("p",[t._v('The elements of the optional "header" sub-element are:')]),t._v(" "),a("p",[a("strong",[t._v("durable")]),t._v(": optional boolean indicating whether the message is durable\n(default false). "),a("strong",[t._v("priority")]),t._v(": optional short indicating the message\npriority (default 4). "),a("strong",[t._v("ttl")]),t._v(": optional long indicating ttl in\nmilliseconds (no default). See also 'properties' absolute expiry time.\n"),a("strong",[t._v("first_acquirer")]),t._v(": boolean indicating if this is the first acquirer of\nthe message (default false) "),a("strong",[t._v("delivery_count")]),t._v(": long indicating the\nnumber of previous "),a("em",[t._v("failed")]),t._v(" delivery attempts for message.")]),t._v(" "),a("p",[t._v('The elements of the optional "properties" sub-element are:')]),t._v(" "),a("p",[a("strong",[t._v("to")]),t._v(": optional string with address message is being sent to (no\ndefault). "),a("strong",[t._v("reply_to")]),t._v(": optional string with address for replies (no\ndefault). Set automatically when sent with reply handler.\n"),a("strong",[t._v("message_id")]),t._v(": optional string with message id (no default). Set\nautomatically when sending with reply handler. "),a("strong",[t._v("correlation_id")]),t._v(":\noptional string with correlation id (no default). Set automatically when\nimplicit reply is sent. "),a("strong",[t._v("subject")]),t._v(": optional string with message\nsubject (no default). "),a("strong",[t._v("group_id")]),t._v(": optional string with message group\nid (no default). "),a("strong",[t._v("group_sequence")]),t._v(": optional long with message group\nsequence (no default). "),a("strong",[t._v("reply_to_group_id")]),t._v(": optional string with\nmessage reply to group id (no default). "),a("strong",[t._v("content_type")]),t._v(": optional\nstring with message content type (no default). Only for use with Data\nbody sections. "),a("strong",[t._v("content_encoding")]),t._v(": optional string with message\ncontent encoding (no default). "),a("strong",[t._v("creation_time")]),t._v(": optional long with\nmessage creation time in milliseconds since the unix epoch (no default).\n"),a("strong",[t._v("absolute_expiry_time")]),t._v(": optional long with absolute expiry time as\nmilliseconds since the unix epoch (no default). "),a("strong",[t._v("user_id")]),t._v(": optional\nstring with the id of the user sending the message (no default).")]),t._v(" "),a("h2",{attrs:{id:"application-properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#application-properties"}},[t._v("#")]),t._v(" Application Properties")]),t._v(" "),a("p",[t._v('To send a message with application properties, the\n"application_properties" element is added to the payload, containing a\nJsonObject whose contents represent the application property entries,\nwhich have string keys and a object representing a simple value such as\nString, Boolean, Integer, etc. For example, adding a property to a sent\nmessage could look something like:')]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" applicationProperties "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\napplicationProperties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" amqpMsgPayload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\namqpMsgPayload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("application_properties "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" applicationProperties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nproducer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("amqpMsgPayload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v('When receiving a message with application properties, the\n"application_properties" element is added to the JsonObject payload\nreturned, containing a JsonObject whose contents represent the\napplication property entries. For example, retrieving an\napplication-property from a received message might look like:')]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check the application properties section was present before use, it may not be")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" appProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" amqpMsgPayload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("application_properties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("appProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" appProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" propValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" appProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propertyName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h1",{attrs:{id:"flow-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flow-control"}},[t._v("#")]),t._v(" Flow Control")]),t._v(" "),a("p",[t._v("Message transfer between peers, such as clients and servers, is governed\nby credit in AMQP 1.0, with receiving peers granting sending peers a\nnumber of credits to allow them to send messages. As each message is\nsent a unit of credit is used up, with the receiving peer needing to\nreplenish the senders credit over time in order for message delivery to\nprogress. This allows for recipients to flow control senders by\ngoverning the amount of outstanding credit available.")]),t._v(" "),a("h2",{attrs:{id:"producers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#producers"}},[t._v("#")]),t._v(" Producers")]),t._v(" "),a("p",[t._v("While a MessageProducer will buffer outgoing messages if there are\ninsufficient credits to send them all immediately, and then send them\nonce credit is granted, it is typically more desirable for the\napplication to work in tandem with the producer and attempt to send only\nwhat it knows can actually currently be sent.")]),t._v(" "),a("p",[t._v("This is possible by inspecting whether the producer write queue is full,\ni.e it currently has no credit to send:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("producer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeQueueFull")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("This check can be used in concert with a handler that can be registered\nto receive callbacks whenever the producer receives more credit and is\nable to send messages immediately rather than buffer them:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("producer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("drainHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...do stuff and send...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"consumers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consumers"}},[t._v("#")]),t._v(" Consumers")]),t._v(" "),a("p",[t._v("In the case of a MessageConsumer, the bridge automatically gives 1000\ncredits to the sending peer when the consumer handler is registered, and\nreplenishes this credit automatically as messages are delivered to the\nhandler. It is possible to adjust the amount of credit given initially\n(the value must be at least 1) by adjusting the maximum buffered message\nvalue before registering a handler, for example:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("consumer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMaxBufferedMessages")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsumer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("msg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...handle received messages...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h1",{attrs:{id:"connecting-using-ssl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connecting-using-ssl"}},[t._v("#")]),t._v(" Connecting using SSL")]),t._v(" "),a("p",[t._v("You can also optionally supply "),a("code",[t._v("AmqpBridgeOptions")]),t._v(" when creating the\nbridge in order to configure various options, the most typically used of\nwhich are around behaviour for SSL connections.")]),t._v(" "),a("p",[t._v("The following is an example of using configuration to create a bridge\nconnecting to a server using SSL, authenticating with a username and\npassword, and supplying a PKCS12 based trust store to verify trust of\nthe server certificate:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" AmqpBridge "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/amqp-bridge"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bridgeOptions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AmqpBridgeOptions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbridgeOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" trustOptions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PfxOptions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"path/to/pkcs12.truststore"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbridgeOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pfxTrustOptions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" trustOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bridge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AmqpBridge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bridgeOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbridge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5672")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ..do things with the bridge..")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("The following is an example of using configuration to create a bridge\nconnecting to a server requiring SSL Client Certificate Authentication,\nsupplying both a PKCS12 based trust store to verify trust of the server\ncertificate and also a PKCS12 based key store containing an SSL key and\ncertificate the server can use to verify the client:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" AmqpBridge "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/amqp-bridge"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bridgeOptions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AmqpBridgeOptions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbridgeOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" trustOptions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PfxOptions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"path/to/pkcs12.truststore"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbridgeOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pfxTrustOptions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" trustOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" keyCertOptions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PfxOptions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"path/to/pkcs12.keystore"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbridgeOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pfxKeyCertOptions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" keyCertOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bridge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AmqpBridge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bridgeOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbridge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5672")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ..do things with the bridge..")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h1",{attrs:{id:"sending-and-receiving-replies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sending-and-receiving-replies"}},[t._v("#")]),t._v(" Sending and Receiving replies.")]),t._v(" "),a("p",[t._v("Like many messaging protocols, AMQP includes support for a reply-to\naddress to be set on each message sent so that recipients can be told\nwhere to send any responses required. The vert.x "),a("code",[t._v("Message")]),t._v(" objects also\nsupport the concept of a reply address, though when using the Event Bus\nthe sender doesn’t set it explicitly, and it is instead populated\nimplicitly if a message is sent with a reply "),a("code",[t._v("Handler")]),t._v(". This section\ndescribes how the bridge handles sending and receiving AMQP messages\nwith reply-to while using the Vert.x producer, consumer, and message\nAPIs implemented by the bridge.")]),t._v(" "),a("h2",{attrs:{id:"sent-messages-seeking-a-reply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sent-messages-seeking-a-reply"}},[t._v("#")]),t._v(" Sent messages seeking a reply.")]),t._v(" "),a("p",[t._v("There are two options when sending messages to which responses are\nrequired:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Populate the AMQP reply-to address of the outgoing message\nexplicitly.")])]),t._v(" "),a("li",[a("p",[t._v("Provide a reply handler when sending to populate it implicitly.")])])]),t._v(" "),a("p",[t._v('With the first option, you may explicitly populate the "reply_to"\nelement of the message "properties" section, as outlined in the '),a("a",{attrs:{href:"#message_payload"}},[t._v("message\npayload overview")]),t._v(". Here you would provide a string\ncontaining the name of the AMQP address on the server to which\nrecipients should direct their responses, typically a named queue to\nwhich you have already established a consumer to receive the replies.\nThis route may be necessary if you need to receive multiple replies to a\ngiven sent AMQP message.")]),t._v(" "),a("p",[t._v("With the second option a reply "),a("code",[t._v("Handler")]),t._v(" may also be given in addition\nto the message payload when sending a message, to be registered such\nthat it is invoked when a [single] response message is received for\nthe message being sent.")]),t._v(" "),a("p",[t._v("To facilitate this, upon startup the bridge internally creates a\nconsumer from a server-named dynamic address, the name of which it then\nuses as the reply-to address on any AMQP messages sent when a\nreplyHandler was given. The bridge also populates the "),a("em",[t._v("message-id")]),t._v(" of\nthe outgoing AMQP message, and uses this value to keep track of the\nreply handler. Incoming messages on the internal 'reply consumer' have\ntheir "),a("em",[t._v("correlation-id")]),t._v(" values inspected in order to match them to the\nreply handler originally given, requiring that reply senders populate\nthe "),a("em",[t._v("correlation-id")]),t._v(" field with the "),a("em",[t._v("message-id")]),t._v(" of the original\nmessage.")]),t._v(" "),a("p",[t._v("The following shows the process for the second option:")]),t._v(" "),a("p",[a("img",{attrs:{src:e(206),alt:"producer reply handler"}})]),t._v(" "),a("ol",[a("li",[a("p",[t._v("The producer is used to send a message to an AMQP address, providing\na reply handler.")])]),t._v(" "),a("li",[a("p",[t._v("The bridge send implementation populates the "),a("em",[t._v("reply-to")]),t._v(" and\n"),a("em",[t._v("message-id")]),t._v(" fields of the outgoing AMQP message, records the\nhandler, and sends the message to the server.")])]),t._v(" "),a("li",[a("p",[t._v("The receiving application (perhaps also a Vert.x AMQP bridge)\nconsumes the message and sends a reply to its "),a("em",[t._v("reply-to")]),t._v(" address,\nsetting its "),a("em",[t._v("correlation-id")]),t._v(" field as the original messages\n"),a("em",[t._v("message-id")]),t._v(".")])]),t._v(" "),a("li",[a("p",[t._v("The server dispatches the reply message to the internal 'reply\nconsumer' of the bridge.")])]),t._v(" "),a("li",[a("p",[t._v("The bridge processes the AMQP message, creating the Vert.x Message\nwith JsonObject body, uses the "),a("em",[t._v("correlation-id")]),t._v(" value to match it\nwith the reply handler, and then invokes the handler with the reply\nmessage.")])])]),t._v(" "),a("p",[t._v("The following is a basic example of sending a message and providing a\nreply-handler to process the response:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" amqpMsgPayload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\namqpMsgPayload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myRequest"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nproducer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("amqpMsgPayload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" amqpReplyMessagePayload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("result")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...do something with reply message...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"received-messages-seeking-a-reply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#received-messages-seeking-a-reply"}},[t._v("#")]),t._v(" Received messages seeking a reply.")]),t._v(" "),a("p",[t._v("When a message arrives, its replyAddress may be inspected. If the AMQP\nmessage had its "),a("em",[t._v("reply-to")]),t._v(" field populated, then the address given will\nbe returned from the Vert.x message replyAddress method. If no\n"),a("em",[t._v("reply-to")]),t._v(" value was present on the message, the value returned will be\nnull.")]),t._v(" "),a("p",[t._v("There are two options when receiving messages to which responses are\nrequired:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Populate the AMQP reply-to address of an outgoing message sent\nexplicitly using a producer.")])]),t._v(" "),a("li",[a("p",[t._v("Send a reply using the Message reply method.")])])]),t._v(" "),a("p",[t._v('With the first option, you may explicitly populate the "reply_to"\nelement of the message "properties" section, as outlined in the '),a("a",{attrs:{href:"#message_payload"}},[t._v("message\npayload overview")]),t._v(", and send it explicitly using a\nproducer established to the address using the bridge.")]),t._v(" "),a("p",[t._v("With the second option, a reply message may be sent by calling the reply\nmethod on the Vert.x message object. The reply method implementation\nensures that the outgoing message "),a("em",[t._v("correlation-id")]),t._v(" is populated\nappropriately using the "),a("em",[t._v("message-id")]),t._v(" of the original message, such that\nthe response can be matched in the case the original message was sent\nfrom a Vert.x AMQP bridge producer with a reply handler provided.")]),t._v(" "),a("p",[t._v("The following outlines the process for both routes, of receiving a\nmessage sent by an application (not shown), and sending a reply:")]),t._v(" "),a("p",[a("img",{attrs:{src:e(207),alt:"consumer reply"}})]),t._v(" "),a("ol",[a("li",[a("p",[t._v("The server sends an AMQP message to the consumer, with a reply-to\nvalue set to another address.")])]),t._v(" "),a("li",[a("p",[t._v("The bridge processes the AMQP message, creating the Vert.x Message\nwith JsonObject body. The Message replyAddress is set to the\nreply-to value from the AMQP message.")])]),t._v(" "),a("li",[a("p",[t._v("The Message is passed to the consumer Handler, which processes it,\ninspecting the replyAddress and preparing to send a response.")])]),t._v(" "),a("li",[a("p",[t._v("The handler chooses to either send a reply using an explicit\nproducer, or call the reply method on the message object.")])]),t._v(" "),a("li",[a("p",[t._v("The reply message arrives at the response address on the server,\nready to be sent to a reply consumer for the original sending\napplication .")])])]),t._v(" "),a("p",[t._v("The following is a basic example of sending a reply using the message\nreply method:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("consumer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("msg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...do something with received message...then reply...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" replyAddress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replyAddress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("replyAddress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" replyAddress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" amqpReplyMessagePayload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    amqpReplyMessagePayload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myResponse"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("amqpReplyMessagePayload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);