(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{337:function(t,e,o){"use strict";o.r(e);var s=o(28),v=Object(s.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"httplocation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#httplocation"}},[t._v("#")]),t._v(" HttpLocation")]),t._v(" "),o("p",[t._v('Represents the location of a HTTP endpoint. This object (its json\nrepresentation) will be used as "location" in a service record.')]),t._v(" "),o("table",[o("thead",[o("tr",[o("th"),t._v(" "),o("th"),t._v(" "),o("th")])]),t._v(" "),o("tbody",[o("tr",[o("td",[t._v("Name")]),t._v(" "),o("td",[t._v("Type")]),t._v(" "),o("td",[t._v("Description")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@endpoint")])]),t._v(" "),o("td",[o("code",[t._v("String")])]),t._v(" "),o("td",[t._v("Sets the endpoint, which is the URL of the service. The endpoint is automatically computed when you use the other `setX` method.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@host")])]),t._v(" "),o("td",[o("code",[t._v("String")])]),t._v(" "),o("td",[t._v("Sets the host.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@port")])]),t._v(" "),o("td",[o("code",[t._v("Number (int)")])]),t._v(" "),o("td",[t._v("Sets the port")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@root")])]),t._v(" "),o("td",[o("code",[t._v("String")])]),t._v(" "),o("td",[t._v("Sets the path of the service (root)")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@ssl")])]),t._v(" "),o("td",[o("code",[t._v("Boolean")])]),t._v(" "),o("td",[t._v("Sets whether or not the HTTP service is using "),o("code",[t._v("https")]),t._v(".")])])])]),t._v(" "),o("h1",{attrs:{id:"record"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#record"}},[t._v("#")]),t._v(" Record")]),t._v(" "),o("p",[t._v("Describes a `service`. The record is the only piece of information\nshared between consumer and provider. It should contains enough metadata\nto let consumer find the service they want.")]),t._v(" "),o("table",[o("thead",[o("tr",[o("th"),t._v(" "),o("th"),t._v(" "),o("th")])]),t._v(" "),o("tbody",[o("tr",[o("td",[t._v("Name")]),t._v(" "),o("td",[t._v("Type")]),t._v(" "),o("td",[t._v("Description")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@location")])]),t._v(" "),o("td",[o("code",[t._v("Json object")])]),t._v(" "),o("td",[t._v("Sets the json object describing the location of the service. By convention, this json object should contain the link entry.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@metadata")])]),t._v(" "),o("td",[o("code",[t._v("Json object")])]),t._v(" "),o("td",[t._v("Gets the metadata attached to the record.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@name")])]),t._v(" "),o("td",[o("code",[t._v("String")])]),t._v(" "),o("td",[t._v("Sets the name of the service. It can reflect the service name of the name of the provider.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@registration")])]),t._v(" "),o("td",[o("code",[t._v("String")])]),t._v(" "),o("td",[t._v("Sets the registration id. This method is called when the service is published.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@status")])]),t._v(" "),o("td",[o("code",[t._v("Status")])]),t._v(" "),o("td",[t._v("Sets the status of the service. When published, the status is set to. When withdrawn, the status is set to .")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@type")])]),t._v(" "),o("td",[o("code",[t._v("String")])]),t._v(" "),o("td",[t._v("Sets the type of service.")])])])]),t._v(" "),o("h1",{attrs:{id:"servicediscoveryoptions"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#servicediscoveryoptions"}},[t._v("#")]),t._v(" ServiceDiscoveryOptions")]),t._v(" "),o("p",[t._v("Options to configure the service discovery.")]),t._v(" "),o("table",[o("thead",[o("tr",[o("th"),t._v(" "),o("th"),t._v(" "),o("th")])]),t._v(" "),o("tbody",[o("tr",[o("td",[t._v("Name")]),t._v(" "),o("td",[t._v("Type")]),t._v(" "),o("td",[t._v("Description")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@announceAddress")])]),t._v(" "),o("td",[o("code",[t._v("String")])]),t._v(" "),o("td",[t._v("Sets the event bus address on which the service arrivals, departures and modifications are announced. This address must be consistent in the whole application.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@autoRegistrationOfImporters")])]),t._v(" "),o("td",[o("code",[t._v("Boolean")])]),t._v(" "),o("td",[t._v("Sets whether or not the registration of importers declared as SPI is enabled.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@backendConfiguration")])]),t._v(" "),o("td",[o("code",[t._v("Json object")])]),t._v(" "),o("td",[t._v("Sets the configuration passed to the . Refer to the backend documentation to get more details on the requirements. The default backend does not need any configuration.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@name")])]),t._v(" "),o("td",[o("code",[t._v("String")])]),t._v(" "),o("td",[t._v("Sets the service discovery name used in the service usage events. If not set, the node id is used.")])]),t._v(" "),o("tr",[o("td",[o("code",[t._v("@usageAddress")])]),t._v(" "),o("td",[o("code",[t._v("String")])]),t._v(" "),o("td",[t._v("Sets the usage address: the event bus address on which are sent the service usage events (bind / release).")])])])])])}),[],!1,null,null,null);e.default=v.exports}}]);