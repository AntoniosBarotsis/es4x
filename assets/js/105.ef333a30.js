(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{405:function(t,e,n){"use strict";n.r(e);var a=n(43),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("The Async MySQL / PostgreSQL Client is responsible for providing an\ninterface for Vert.x applications that need to interact with a MySQL or\nPostgreSQL database.")]),t._v(" "),n("p",[t._v("It uses Mauricio Linhares "),n("a",{attrs:{href:"https://github.com/mauricio/postgresql-async",target:"_blank",rel:"noopener noreferrer"}},[t._v("async\ndriver"),n("OutboundLink")],1),t._v(" to interact with\nthe MySQL or PostgreSQL databases in a non blocking way.")]),t._v(" "),n("h1",{attrs:{id:"using-the-mysql-and-postgresql-client"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#using-the-mysql-and-postgresql-client"}},[t._v("#")]),t._v(" Using the MySQL and PostgreSQL client")]),t._v(" "),n("p",[t._v("This section describes how to configure your project to be able to use\nthe MySQL / PostgreSQL client in your application.")]),t._v(" "),n("h2",{attrs:{id:"in-a-regular-application"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#in-a-regular-application"}},[t._v("#")]),t._v(" In a regular application")]),t._v(" "),n("p",[t._v("To use this client, you need to add the following jar to your\n"),n("code",[t._v("CLASSPATH")]),t._v(":")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("${maven.artifactId} ${maven.version} (the client)")])]),t._v(" "),n("li",[n("p",[t._v("scala-library 2.11.4")])]),t._v(" "),n("li",[n("p",[t._v("the postgress-async-2.11 and mysdql-async-2.11 from\n"),n("a",{attrs:{href:"https://github.com/mauricio/postgresql-async",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/mauricio/postgresql-async"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[t._v("joda time")])])]),t._v(" "),n("p",[t._v("All these jars are downloadable from Maven Central.")]),t._v(" "),n("h2",{attrs:{id:"in-an-application-packaged-in-a-fat-jar"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#in-an-application-packaged-in-a-fat-jar"}},[t._v("#")]),t._v(" In an application packaged in a fat jar")]),t._v(" "),n("p",[t._v("If you are building a "),n("em",[t._v("Fat-jar")]),t._v(" using Maven or Gradle, just add the\nfollowing dependencies:")]),t._v(" "),n("ul",[n("li",[t._v("Maven (in your "),n("code",[t._v("pom.xml")]),t._v("):")])]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("io.vertx"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("vertx-mysql-postgresql-client"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("${maven.version}"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("ul",[n("li",[t._v("Gradle (in your "),n("code",[t._v("build.gradle")]),t._v(" file):")])]),t._v(" "),n("div",{staticClass:"language-groovy extra-class"},[n("pre",{pre:!0,attrs:{class:"language-groovy"}},[n("code",[t._v("compile "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'io.vertx:vertx-mysql-postgresql-client:${maven.version}'")]),t._v("\n")])])]),n("h2",{attrs:{id:"in-an-application-using-a-vert-x-distributions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#in-an-application-using-a-vert-x-distributions"}},[t._v("#")]),t._v(" In an application using a vert.x distributions")]),t._v(" "),n("p",[t._v("If you are using a vert.x distribution, add the jar files listed above\nto the "),n("code",[t._v("$VERTX_HOME/lib")]),t._v(" directory.")]),t._v(" "),n("p",[t._v("Alternatively, you can edit the "),n("code",[t._v("vertx-stack.json")]),t._v(" file located in\n"),n("code",[t._v("$VERTX_HOME")]),t._v(", and set "),n("code",[t._v('"included": true')]),t._v(" for the\n"),n("code",[t._v("vertx-mysql-postgresql-client")]),t._v(" dependency. Once done, launch: "),n("code",[t._v("vertx resolve --dir=lib --stack= ./vertx-stack.json")]),t._v(". It downloads the client and its dependencies.")]),t._v(" "),n("h1",{attrs:{id:"creating-a-client"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-client"}},[t._v("#")]),t._v(" Creating a client")]),t._v(" "),n("p",[t._v("There are several ways to create a client. Let’s go through them all.")]),t._v(" "),n("h2",{attrs:{id:"using-default-shared-pool"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#using-default-shared-pool"}},[t._v("#")]),t._v(" Using default shared pool")]),t._v(" "),n("p",[t._v("In most cases you will want to share a pool between different client\ninstances.")]),t._v(" "),n("p",[t._v("E.g. you scale your application by deploying multiple instances of your\nverticle and you want each verticle instance to share the same pool so\nyou don’t end up with multiple pools")]),t._v(" "),n("p",[t._v("You do this as follows:")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MySQLClient")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" from "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/mysql-postgresql"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PostgreSQLClient")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" from "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/mysql-postgresql"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// To create a MySQL client:")]),t._v("\n\nlet mySQLClientConfig "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"host"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mymysqldb.mycompany"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlet mySQLClient "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MySQLClient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mySQLClientConfig"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// To create a PostgreSQL client:")]),t._v("\n\nlet postgreSQLClientConfig "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"host"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mypostgresqldb.mycompany"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlet postgreSQLClient "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PostgreSQLClient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" postgreSQLClientConfig"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("The first call to "),n("code",[t._v("MySQLClient.createShared")]),t._v(" or\n"),n("code",[t._v("PostgreSQLClient.createShared")]),t._v(" will actually create the data source,\nand the specified config will be used.")]),t._v(" "),n("p",[t._v("Subsequent calls will return a new client instance that uses the same\ndata source, so the configuration won’t be used.")]),t._v(" "),n("h2",{attrs:{id:"specifying-a-pool-name"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#specifying-a-pool-name"}},[t._v("#")]),t._v(" Specifying a pool name")]),t._v(" "),n("p",[t._v("You can create a client specifying a pool name as follows")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MySQLClient")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" from "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/mysql-postgresql"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PostgreSQLClient")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" from "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/mysql-postgresql"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// To create a MySQL client:")]),t._v("\n\nlet mySQLClientConfig "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"host"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mymysqldb.mycompany"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlet mySQLClient "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MySQLClient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mySQLClientConfig"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MySQLPool1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// To create a PostgreSQL client:")]),t._v("\n\nlet postgreSQLClientConfig "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"host"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mypostgresqldb.mycompany"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlet postgreSQLClient "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PostgreSQLClient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createShared")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" postgreSQLClientConfig"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PostgreSQLPool1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("If different clients are created using the same Vert.x instance and\nspecifying the same pool name, they will share the same data source.")]),t._v(" "),n("p",[t._v("The first call to "),n("code",[t._v("MySQLClient.createShared")]),t._v(" or\n"),n("code",[t._v("PostgreSQLClient.createShared")]),t._v(" will actually create the data source,\nand the specified config will be used.")]),t._v(" "),n("p",[t._v("Subsequent calls will return a new client instance that uses the same\npool, so the configuration won’t be used.")]),t._v(" "),n("p",[t._v("Use this way of creating if you wish different groups of clients to have\ndifferent pools, e.g. they’re interacting with different databases.")]),t._v(" "),n("h2",{attrs:{id:"creating-a-client-with-a-non-shared-data-source"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-client-with-a-non-shared-data-source"}},[t._v("#")]),t._v(" Creating a client with a non shared data source")]),t._v(" "),n("p",[t._v("In most cases you will want to share a pool between different client\ninstances. However, it’s possible you want to create a client instance\nthat doesn’t share its pool with any other client.")]),t._v(" "),n("p",[t._v("In that case you can use "),n("code",[t._v("MySQLClient.createNonShared")]),t._v(" or\n"),n("code",[t._v("PostgreSQLClient.createNonShared")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MySQLClient")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" from "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/mysql-postgresql"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PostgreSQLClient")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" from "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@vertx/mysql-postgresql"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// To create a MySQL client:")]),t._v("\n\nlet mySQLClientConfig "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"host"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mymysqldb.mycompany"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlet mySQLClient "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MySQLClient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createNonShared")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mySQLClientConfig"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// To create a PostgreSQL client:")]),t._v("\n\nlet postgreSQLClientConfig "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"host"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mypostgresqldb.mycompany"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlet postgreSQLClient "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PostgreSQLClient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createNonShared")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vertx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" postgreSQLClientConfig"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("This is equivalent to calling "),n("code",[t._v("MySQLClient.createShared")]),t._v(" or\n"),n("code",[t._v("PostgreSQLClient.createShared")]),t._v(" with a unique pool name each time.")]),t._v(" "),n("h1",{attrs:{id:"closing-the-client"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#closing-the-client"}},[t._v("#")]),t._v(" Closing the client")]),t._v(" "),n("p",[t._v("You can hold on to the client for a long time (e.g. the life-time of\nyour verticle), but once you have finished with it, you should close it\nusing "),n("code",[t._v("close")]),t._v(" or "),n("code",[t._v("close")])]),t._v(" "),n("h1",{attrs:{id:"getting-a-connection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getting-a-connection"}},[t._v("#")]),t._v(" Getting a connection")]),t._v(" "),n("p",[t._v("Use "),n("code",[t._v("getConnection")]),t._v(" to get a connection.")]),t._v(" "),n("p",[t._v("This will return the connection in the handler when one is ready from\nthe pool.")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Now do stuff with it:")]),t._v("\n\nclient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("succeeded")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    let connection "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("result")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Got a connection")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Failed to get connection - deal with it")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("Once you’ve finished with the connection make sure you close it\nafterwards.")]),t._v(" "),n("p",[t._v("The connection is an instance of "),n("code",[t._v("SQLConnection")]),t._v(" which is a common\ninterface used by other SQL clients.")]),t._v(" "),n("p",[t._v("You can learn how to use it in the "),n("a",{attrs:{href:"http://vertx.io/docs/vertx-sql-common/js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("common sql\ninterface"),n("OutboundLink")],1),t._v(" documentation.")]),t._v(" "),n("h2",{attrs:{id:"configuring-reconnections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuring-reconnections"}},[t._v("#")]),t._v(" Configuring reconnections")]),t._v(" "),n("p",[t._v("This service is able to recover from temporary database outages, such as\nthose which occur during a database restart or brief loss of network\nconnectivity. You can configure the expected behaviour when acquiring\nconnections via the following properties:")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("maxConnectionRetries")])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("connectionRetryDelay")])])])]),t._v(" "),n("p",[t._v("When the internal connection pool attempts to acquire an open connection\nand fails, it will retry up to "),n("code",[t._v("maxConnectionRetries")]),t._v(" times, with a\ndelay of "),n("code",[t._v("connectionRetryDelay")]),t._v(" milliseconds between each attempt. If\nall attempts fail, any clients waiting for connections from the pool\nwill be notified with an Error, indicating that a Connection could not\nbe acquired. Note that clients will not be notified with an Error until\na full round of attempts fail, which may be some time after the initial\nconnection attempt.")]),t._v(" "),n("p",[t._v("If "),n("code",[t._v("maxConnectionRetries")]),t._v(" is set to "),n("code",[t._v("0")]),t._v(", the internal connection pool\nwill not perform any reconnection (default). If "),n("code",[t._v("maxConnectionRetries")]),t._v("\nis set to "),n("code",[t._v("-1")]),t._v(", the internal connection pool will attempt to acquire new\nconnections indefinitely, so any call to "),n("code",[t._v("getConnection")]),t._v(" may be\nindefinitely waiting for a successful acquisition.")]),t._v(" "),n("p",[t._v("Once a full round of acquisition attempts fails, the internal connection\npool will remain active, and will try again to acquire connections in\nresponse to future requests for connections.")]),t._v(" "),n("p",[t._v("Note that if a database restart occurs, a pool may contain previously\nacquired but now stale Connections that will only be detected and purged\nlazily, when the pool attempts to reuse them.")]),t._v(" "),n("h2",{attrs:{id:"note-about-date-and-timestamps"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#note-about-date-and-timestamps"}},[t._v("#")]),t._v(" Note about date and timestamps")]),t._v(" "),n("p",[t._v("Whenever you get dates back from the database, this service will\nimplicitly convert them into ISO 8601 ("),n("code",[t._v("yyyy-MM-ddTHH:mm:ss.SSS")]),t._v(")\nformatted strings. MySQL usually discards milliseconds, so you will\nregularly see "),n("code",[t._v(".000")]),t._v(".")]),t._v(" "),n("h2",{attrs:{id:"note-about-last-inserted-ids"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#note-about-last-inserted-ids"}},[t._v("#")]),t._v(" Note about last inserted ids")]),t._v(" "),n("p",[t._v("When inserting new rows into a table, you might want to retrieve\nauto-incremented ids from the database. The JDBC API usually lets you\nretrieve the last inserted id from a connection. If you use MySQL, it\nwill work the way it does like the JDBC API. In PostgreSQL you can add\nthe "),n("a",{attrs:{href:"http://www.postgresql.org/docs/current/static/sql-insert.html",target:"_blank",rel:"noopener noreferrer"}},[t._v('"RETURNING"\nclause'),n("OutboundLink")],1),t._v("\nto get the latest inserted ids. Use one of the "),n("code",[t._v("query")]),t._v(" methods to get\naccess to the returned columns.")]),t._v(" "),n("h2",{attrs:{id:"note-about-stored-procedures"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#note-about-stored-procedures"}},[t._v("#")]),t._v(" Note about stored procedures")]),t._v(" "),n("p",[t._v("The "),n("code",[t._v("call")]),t._v(" and "),n("code",[t._v("callWithParams")]),t._v(" methods are not implemented currently.")]),t._v(" "),n("h1",{attrs:{id:"configuration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),n("p",[t._v("Both the PostgreSql and MySql clients take the same configuration:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('{\n "host" : <your-host>,\n "port" : <your-port>,\n "maxPoolSize" : <maximum-number-of-open-connections>,\n "username" : <your-username>,\n "password" : <your-password>,\n "database" : <name-of-your-database>,\n "charset" : <name-of-the-character-set>,\n "connectTimeout" : <timeout-in-milliseconds>,\n "testTimeout" : <timeout-in-milliseconds>,\n "queryTimeout" : <timeout-in-milliseconds>,\n "maxConnectionRetries" : <maximum-number-of-connection-retries>,\n "connectionRetryDelay" : <delay-in-milliseconds>,\n "sslMode" : <"disable"|"prefer"|"require"|"verify-ca"|"verify-full">,\n "sslRootCert" : <path to file with certificate>\n}\n')])])]),n("ul",[n("li",[n("p",[n("code",[t._v("host")]),n("br"),t._v("\nThe host of the database. Defaults to "),n("code",[t._v("localhost")]),t._v(".")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("port")]),n("br"),t._v("\nThe port of the database. Defaults to "),n("code",[t._v("5432")]),t._v(" for PostgreSQL and\n"),n("code",[t._v("3306")]),t._v(" for MySQL.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("maxPoolSize")]),n("br"),t._v("\nThe number of connections that may be kept open. Defaults to "),n("code",[t._v("10")]),t._v(".")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("username")]),n("br"),t._v("\nThe username to connect to the database. Defaults to "),n("code",[t._v("vertx")]),t._v(".")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("password")]),n("br"),t._v("\nThe password to connect to the database. Defaults to "),n("code",[t._v("password")]),t._v(".")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("database")]),n("br"),t._v("\nThe name of the database you want to connect to. Defaults to\n"),n("code",[t._v("testdb")]),t._v(".")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("charset")]),n("br"),t._v("\nThe name of the character set you want to use for the connection.\nDefaults to "),n("code",[t._v("UTF-8")]),t._v(".")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("connectTimeout")]),n("br"),t._v("\nThe timeout to wait for connecting to the database. Defaults to\n"),n("code",[t._v("10000")]),t._v(" (= 10 seconds).")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("testTimeout")]),n("br"),t._v("\nThe timeout for connection tests performed by pools. Defaults to\n"),n("code",[t._v("10000")]),t._v(" (= 10 seconds).")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("queryTimeout")]),n("br"),t._v("\nThe timeout to wait for a query in milliseconds. Default is not set.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("maxConnectionRetries")]),n("br"),t._v("\nMaximum number of connection retries. Defaults to "),n("code",[t._v("0")]),t._v(" (no\nretries)."),n("br"),t._v("\nSpecial values:")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("-1"),n("br"),t._v("\nUnlimited number of connection retries")])]),t._v(" "),n("li",[n("p",[t._v("0"),n("br"),t._v("\nNo connection retries will be done")])])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("connectionRetryDelay")]),n("br"),t._v("\nDelay in milliseconds between each retry attempt. Defaults to "),n("code",[t._v("5000")]),t._v("\n(= 5 seconds).")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("sslMode")]),n("br"),t._v("\nIf you want to enable SSL support you should enable this parameter.\nFor example to connect Heroku you will need to use "),n("strong",[t._v("prefer")]),t._v(".")]),t._v(" "),n("ul",[n("li",[n("p",[t._v('"disable"'),n("br"),t._v("\nonly try a non-SSL connection")])]),t._v(" "),n("li",[n("p",[t._v('"prefer"'),n("br"),t._v("\nfirst try an SSL connection; if that fails, try a non-SSL\nconnection")])]),t._v(" "),n("li",[n("p",[t._v('"require"'),n("br"),t._v("\nonly try an SSL connection, but don’t verify Certificate\nAuthority")])]),t._v(" "),n("li",[n("p",[t._v('"verify-ca"'),n("br"),t._v("\nonly try an SSL connection, and verify that the server\ncertificate is issued by a trusted certificate authority (CA)")])]),t._v(" "),n("li",[n("p",[t._v('"verify-full"'),n("br"),t._v("\nonly try an SSL connection, verify that the server certificate\nis issued by a trusted CA and that the server host name matches\nthat in the certificate")])])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("sslRootCert")]),n("br"),t._v("\nPath to SSL root certificate file. Is used if you want to verify\nprivately issued certificate. Refer to\n"),n("a",{attrs:{href:"https://github.com/mauricio/postgresql-async",target:"_blank",rel:"noopener noreferrer"}},[t._v("postgresql-async"),n("OutboundLink")],1),t._v("\ndocumentation for more details.")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);