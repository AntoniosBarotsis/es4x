(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{328:function(e,t,s){"use strict";s.r(t);var a=s(28),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"kubernetes-bridge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-bridge"}},[e._v("#")]),e._v(" Kubernetes bridge")]),e._v(" "),s("p",[e._v("This discovery bridge imports services from Kubernetes (or Openshift v3)\ninto the Vert.x service discovery. Kubernetes services are mapped to\n"),s("code",[e._v("Record")]),e._v(". This bridge only supports the importation of services from\nkubernetes in vert.x (and not the opposite).")]),e._v(" "),s("p",[s("code",[e._v("Record")]),e._v(" are created from Kubernetes Service. The service type is\ndeduced from the "),s("code",[e._v("service-type")]),e._v(" label or from the port exposed by the\nservice.")]),e._v(" "),s("h2",{attrs:{id:"using-the-bridge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-the-bridge"}},[e._v("#")]),e._v(" Using the bridge")]),e._v(" "),s("p",[e._v("To use this Vert.x discovery bridge, add the following dependency to the\n"),s("em",[e._v("dependencies")]),e._v(" section of your build descriptor:")]),e._v(" "),s("ul",[s("li",[e._v("Maven (in your "),s("code",[e._v("pom.xml")]),e._v("):")])]),e._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("io.vertx"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("vertx-service-discovery-bridge-kubernetes"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("${maven.version}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])])]),s("ul",[s("li",[e._v("Gradle (in your "),s("code",[e._v("build.gradle")]),e._v(" file):")])]),e._v(" "),s("div",{staticClass:"language-groovy extra-class"},[s("pre",{pre:!0,attrs:{class:"language-groovy"}},[s("code",[e._v("compile "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'io.vertx:vertx-service-discovery-bridge-kubernetes:${maven.version}'")]),e._v("\n")])])]),s("h2",{attrs:{id:"configuring-the-bridge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuring-the-bridge"}},[e._v("#")]),e._v(" Configuring the bridge")]),e._v(" "),s("p",[e._v("The bridge is configured using:")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("the oauth token (using the content of\n"),s("code",[e._v("/var/run/secrets/kubernetes.io/serviceaccount/token")]),e._v(" by default)")])]),e._v(" "),s("li",[s("p",[e._v("the namespace in which the service are searched (defaults to\n"),s("code",[e._v("default")]),e._v(").")])])]),e._v(" "),s("p",[e._v("Be aware that the application must have access to Kubernetes and must be\nable to read the chosen namespace.")]),e._v(" "),s("h2",{attrs:{id:"the-service-to-record-mapping"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-service-to-record-mapping"}},[e._v("#")]),e._v(" The Service to Record mapping")]),e._v(" "),s("p",[e._v("The record is created as follows:")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("the service type is deduced from the "),s("code",[e._v("service.type")]),e._v(" label. If this\nlabel is not set the service type is set to "),s("code",[e._v("unknown")])])]),e._v(" "),s("li",[s("p",[e._v("the record’s name is the service’s name")])]),e._v(" "),s("li",[s("p",[e._v("the labels of the service are mapped to metadata")])]),e._v(" "),s("li",[s("p",[e._v("in addition are added: "),s("code",[e._v("kubernetes.uuid")]),e._v(", "),s("code",[e._v("kubernetes.namespace")]),e._v(",\n"),s("code",[e._v("kubernetes.name")])])]),e._v(" "),s("li",[s("p",[e._v("the location is deduced from the*first** port of the service")])])]),e._v(" "),s("p",[e._v("For HTTP endpoints, the "),s("code",[e._v("ssl")]),e._v(" ("),s("code",[e._v("https")]),e._v(") attribute is set to "),s("code",[e._v("true")]),e._v(" if\nthe service has the "),s("code",[e._v("ssl")]),e._v(" label set to "),s("code",[e._v("true")]),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"dynamics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dynamics"}},[e._v("#")]),e._v(" Dynamics")]),e._v(" "),s("p",[e._v("The bridge imports all services on "),s("code",[e._v("start")]),e._v(" and removes them on "),s("code",[e._v("stop")]),e._v(".\nIn between it watches the Kubernetes services and add the new ones and\nremoves the deleted ones.")]),e._v(" "),s("h2",{attrs:{id:"supported-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#supported-types"}},[e._v("#")]),e._v(" Supported types")]),e._v(" "),s("p",[e._v("The bridge uses the "),s("code",[e._v("service-type")]),e._v(" label to induce the type. In addition\nit checks the port of the service. Are supported:")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("ports 80, 443 and from 8080 to 9000: HTTP endpoint")])]),e._v(" "),s("li",[s("p",[e._v("ports 5432 and 5433: JDBC data source (PostGreSQL)")])]),e._v(" "),s("li",[s("p",[e._v("ports 3306 and 13306: JDBC data source (MySQL)")])]),e._v(" "),s("li",[s("p",[e._v("port 6379: Redis data source")])]),e._v(" "),s("li",[s("p",[e._v("ports 27017, 27018 and 27019: MongoDB data source")])])]),e._v(" "),s("p",[e._v("If present, the "),s("code",[e._v("service-type")]),e._v(" overrides the port-based deduction.")])])}),[],!1,null,null,null);t.default=r.exports}}]);